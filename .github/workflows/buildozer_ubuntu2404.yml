name: Build Kivy Android App

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.buildozer
        key: ${{ runner.os }}-buildozer-${{ hashFiles('**/buildozer.spec') }}-v2
        restore-keys: |
          ${{ runner.os }}-buildozer-v2-
    
    - name: Update system packages
      run: |
        sudo apt-get update
        sudo apt-get upgrade -y
    
    - name: Install build dependencies
      run: |
        sudo apt-get install -y \
          build-essential \
          git \
          make \
          autoconf \
          automake \
          libtool \
          pkg-config \
          cmake \
          ninja-build \
          zip \
          unzip \
          openjdk-17-jdk \
          cython3 \
          zlib1g-dev \
          libncurses5-dev \
          libncursesw5-dev \
          libffi-dev \
          libssl-dev \
          python3-pip \
          python3-dev \
          python3-setuptools \
          python3-wheel
    
    - name: Set up Java environment
      run: |
        echo "JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64" >> $GITHUB_ENV
        echo "/usr/lib/jvm/java-17-openjdk-amd64/bin" >> $GITHUB_PATH
    
    - name: Fix Python externally-managed error
      run: |
        sudo rm -f /usr/lib/python*/EXTERNALLY-MANAGED
    
    - name: Install Python packages
      run: |
        python3 -m pip install --upgrade pip setuptools wheel
        pip3 install --user --upgrade Cython==0.29.33 virtualenv
        echo "$HOME/.local/bin" >> $GITHUB_PATH
    
    - name: Install Buildozer
      run: |
        pip3 install --user buildozer
    
    - name: Verify Buildozer installation
      run: |
        buildozer --version
    
    - name: Initialize Buildozer (if buildozer.spec doesn't exist)
      run: |
        if [ ! -f buildozer.spec ]; then
          buildozer init
        fi
    
    - name: Configure buildozer.spec for proper SDK/NDK versions
      run: |
        if [ -f buildozer.spec ]; then
          # Configure buildozer.spec with proper versions
          sed -i 's/#android.api = 28/android.api = 33/g' buildozer.spec
          sed -i 's/#android.minapi = 21/android.minapi = 21/g' buildozer.spec
          sed -i 's/#android.ndk = 23b/android.ndk = 25b/g' buildozer.spec
          sed -i 's/#android.accept_sdk_license = False/android.accept_sdk_license = True/g' buildozer.spec
          sed -i 's/#android.archs = arm64-v8a, armeabi-v7a/android.archs = arm64-v8a/g' buildozer.spec
          
          # Add p4a branch specification to use stable version
          sed -i 's/#p4a.branch = main/p4a.branch = master/g' buildozer.spec
          
          # Set specific p4a commit or tag for stability
          echo "" >> buildozer.spec
          echo "# Use stable p4a version" >> buildozer.spec
          echo "p4a.source_dir = " >> buildozer.spec
          
          # Show buildozer.spec contents for debugging
          echo "=== buildozer.spec android settings ==="
          cat buildozer.spec | grep -E "(android\.|p4a\.)" || echo "No android/p4a settings found"
        fi
    
    - name: Create buildozer directories and accept licenses
      run: |
        mkdir -p ~/.buildozer/android/platform/android-sdk/licenses
        echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" > ~/.buildozer/android/platform/android-sdk/licenses/android-sdk-license
        echo "d975f751698a77b662f1254ddbeed3901e976f5a" > ~/.buildozer/android/platform/android-sdk/licenses/intel-android-extra-license
        echo "504667f4c0de7af1d06b54a12dd9d1eba8c5b8e1" > ~/.buildozer/android/platform/android-sdk/licenses/android-googletv-license
        echo "33b6a2b64607f11b759f30e30d9e7d2c" > ~/.buildozer/android/platform/android-sdk/licenses/android-sdk-preview-license
    
    - name: Pre-download and setup Android SDK
      run: |
        cd ~/.buildozer/android/platform/
        
        # Download Android SDK command line tools
        if [ ! -f commandlinetools-linux-9477386_latest.zip ]; then
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        fi
        
        if [ ! -d android-sdk ]; then
          unzip -q commandlinetools-linux-9477386_latest.zip
          mkdir -p android-sdk/cmdline-tools
          mv cmdline-tools android-sdk/cmdline-tools/latest
        fi
        
        # Set up environment
        export ANDROID_SDK_ROOT=$HOME/.buildozer/android/platform/android-sdk
        export ANDROID_HOME=$ANDROID_SDK_ROOT
        export PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin
        
        # Install required SDK components
        yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses || true
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager \
          "platform-tools" \
          "platforms;android-33" \
          "build-tools;33.0.2" \
          "ndk;25.2.9519653"
    
    - name: Set environment variables
      run: |
        echo "ANDROID_SDK_ROOT=$HOME/.buildozer/android/platform/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_HOME=$HOME/.buildozer/android/platform/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_NDK_ROOT=$HOME/.buildozer/android/platform/android-sdk/ndk/25.2.9519653" >> $GITHUB_ENV
        echo "PATH=$PATH:$HOME/.buildozer/android/platform/android-sdk/cmdline-tools/latest/bin:$HOME/.buildozer/android/platform/android-sdk/platform-tools:$HOME/.buildozer/android/platform/android-sdk/build-tools/33.0.2" >> $GITHUB_ENV
    
    - name: Clean previous build (if exists)
      run: |
        if [ -d .buildozer ]; then
          buildozer android clean || true
        fi
    
    - name: Build Android APK
      run: |
        # Export environment variables
        export ANDROID_SDK_ROOT=$HOME/.buildozer/android/platform/android-sdk
        export ANDROID_HOME=$ANDROID_SDK_ROOT
        export ANDROID_NDK_ROOT=$HOME/.buildozer/android/platform/android-sdk/ndk/25.2.9519653
        export PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$ANDROID_SDK_ROOT/build-tools/33.0.2
        export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
        
        # Fix potential autotools issues
        export ACLOCAL_PATH="/usr/share/aclocal:${ACLOCAL_PATH:-}"
        export PKG_CONFIG_PATH="/usr/lib/pkgconfig:/usr/share/pkgconfig:${PKG_CONFIG_PATH:-}"
        
        # Build with verbose logging
        buildozer android debug --verbose
      env:
        BUILDOZER_LOG_LEVEL: 2
        # Prevent interactive prompts
        DEBIAN_FRONTEND: noninteractive
        # Fix autotools issues
        AUTOMAKE: /usr/bin/automake
        ACLOCAL: /usr/bin/aclocal
        AUTOCONF: /usr/bin/autoconf
        AUTORECONF: /usr/bin/autoreconf
        LIBTOOLIZE: /usr/bin/libtoolize
    
    - name: List build output
      if: always()
      run: |
        echo "=== Build directory contents ==="
        find . -name "*.apk" -type f 2>/dev/null || echo "No APK files found"
        ls -la bin/ 2>/dev/null || echo "No bin directory found"
        ls -la dist/ 2>/dev/null || echo "No dist directory found"
    
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: android-apk
        path: |
          bin/*.apk
          dist/*.apk
        retention-days: 30
    
    - name: Upload build logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          .buildozer/logs/
          *.log
        retention-days: 7
    
    - name: Debug information
      if: failure()
      run: |
        echo "=== Environment Variables ==="
        env | grep -E "(ANDROID|JAVA|PATH)" | sort
        echo ""
        echo "=== Buildozer version ==="
        buildozer --version || echo "Buildozer not found"
        echo ""
        echo "=== Last 100 lines of buildozer output ==="
        if [ -f .buildozer/logs/buildozer.log ]; then
          tail -100 .buildozer/logs/buildozer.log
        else
          echo "No buildozer log found"
        fi
